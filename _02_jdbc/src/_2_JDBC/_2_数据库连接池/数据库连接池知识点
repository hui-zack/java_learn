目录:
    基本概念:

    --> [数据库连接池技术]
    C3P0:
    druid:

知识点梳理:
    --> [数据库连接池技术]
        C3P0:
            标准流程:
                DataSource ds  = new ComboPooledDataSource();                           //* 获取连接池, 使用默认配置; 多态
                Connection conn =  ds.getConnection();                                  //* 借用数据库连接对象
            环境搭建:
                jar包:
                    mchange-commons-java-0.2.12.jar
                    c3p0-0.9.5.2.jar
                配置文件:
                    文件名      : 必须为c3p0-config.xml
                    文件位置    : 必须在src或标记的Resources根目录中, 且不能位于次级文件夹

        c3p0使用配置文件name选择配置:
            标准使用流程:
                DataSource ds  = new ComboPooledDataSource("localhost:3306/db3");       //* 获取连接池, 选择name名为localhost:3306/db3的配置
                Connection conn =  ds.getConnection();                                  //* 借用数据库连接对象
        druid:
            环境搭建:
                前提: 数据库驱动jar包已安装
                1. 导入jar包:
                    druid-1.0.9.jar
                2.定义配置文件:
                    文件名    :  可以使用任意文件名, 但必须是.properties类型的文件
                    文件位置  :  可以放在任意目录下, 加载即可
            标准使用流程:
                //* 获取properties
                Properties pro = new Properties();
                InputStream is = DruidDateSourceFactory_CDemo.class.getClassLoader().getResourceAsStream("druid.properties");
                pro.load(is);

                //* 获取连接池
                DataSource ds = DruidDataSourceFactory.createDataSource(pro);
                //* 获取连接对象
                Connection conn = ds.getConnection();
------------------------------------------------------------------------------------------------------------------------
基本概念:
    数据库连接池:
        但系统初始化好后, 容器被创建, 容器中会申请一些连接对象
        当用户访问数据库, 从容器中获取连接对象, 访问完后归还连接对象
    优点:
        节约资源:
            连接对象
        用户访问速度快:
            用户访问时省去申请和释放资源的时间
    实现:
        DateSource接口:
            javax.sql包下的标准接口, 由各数据库厂商实现

        常用数据库连接池技术:
            1. Druid:
                阿里巴巴提供, 速度快, 技术新
            2. C3P0:
                速度较快
    使用:
        获取连接对象:
            getConnection()         //* 获取池子中的连接对象
        归还连接对象:
            Conn.close()            //* 归还池子中的连接对象


C3P0:
    使用流程:
        DataSource ds  = new ComboPooledDataSource();           //* 创建连接池对象, 选择默认配置; 多态

        Connection conn = null;
        PreparedStatement ps = null;
        try {
            conn = ds.getConnection();                          //* 连接池借用连接对象

            String sql = "select * from user";
            ps = conn.prepareStatement(sql);

            ResultSet rs = ps.executeQuery();

            List<User> userList = parseUserResult(rs);
            for (User user : userList){
                System.out.println(user);
            }
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        } finally {
            JDBCUtils.close(ps, conn);                          //* jdbc工具类返还连接对象
        }


        public static List<User> parseUserResult(ResultSet rs) throws SQLException {
            List<User> userList = new ArrayList<>();
            User user = null;
            while (rs.next()){
                int id = rs.getInt("id");
                String username = rs.getString("username");
                String password = rs.getString("password");
                user = new User(id, username, password);
                userList.add(user);
            }
            return userList;
        }
    基本说明:
        c3p0的基本使用
        数据库连接池借用的对象, conn.close()不是释放资源而是归还资源
    C3P0环境搭建:
        前提: 数据库驱动jar包已安装
        1. 导入jar包:
            mchange-commons-java-0.2.12.jar
            c3p0-0.9.5.2.jar
        2.定义配置文件:
            文件名必须为:
                c3p0-config.xml
            文件位置:
                必须在src或标记的Resources根目录中, 且不能位于次级文件夹
    标准使用流程:
        DataSource ds  = new ComboPooledDataSource();                           //* 创建连接池对象, 使用默认配置; 多态
        Connection conn =  ds.getConnection();                                  //* 借用数据库连接对象

    类的使用:
        创建数据库连接池对象:
            使用默认配置:
                DataSource ds  = new ComboPooledDataSource();
            使用配置文件中name名为"localhost:3306/db3"的配置:
                DataSource ds  = new ComboPooledDataSource("localhost:3306/db3");
        成员方法:
            Connection getConnection()
                返回一个池子中的数据库连接对象


c3p0使用根据name选择配置:
    使用流程:
        DataSource ds  = new ComboPooledDataSource("localhost:3306/db3");           //* 创建连接池对象, 选择name名为localhost:3306/db3的配置

        Connection conn = null;
        PreparedStatement ps = null;
        try {
            conn = ds.getConnection();                          //* 连接池借用连接对象
            String sql = "select * from account";
            ps = conn.prepareStatement(sql);

            ResultSet rs = ps.executeQuery();

            System.out.println(rs);
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        } finally {
            JDBCUtils.close(ps, conn);                          //* jdbc工具类返还连接对象
        }
    基本说明:
        可以根据xml配置文件中的name名:
            选择加载对应的数据库驱动, database, mysql账号密码及数据库连接池配置等

--> [数据库连接池技术]
druid:
    使用流程:

        Properties pro = new Properties();                                              //* 获取properties
        InputStream is = DruidDateSourceFactory_CDemo.class.getClassLoader().getResourceAsStream("druid.properties");
                                                                                        // 本地类加载器返回配置流
        pro.load(is);


        DataSource ds = DruidDataSourceFactory.createDataSource(pro);                   //* 获取连接池对象
        Connection conn = ds.getConnection();                                           //* 获取数据库连接对象

        String sql = "select * from user";
        PreparedStatement ps = conn.prepareStatement(sql);
        ResultSet rs = ps.executeQuery();
        List<User> userList = parseUserResult(rs);
        for (User user : userList){
            System.out.println(user);
        }

        JDBCUtils.close(ps, conn);                                                      //* JDBCUtils释放资源, 归还conn


        public static List<User> parseUserResult(ResultSet rs) throws SQLException {
            List<User> userList = new ArrayList<>();
            User user = null;
            while (rs.next()){
                int id = rs.getInt("id");
                String username = rs.getString("username");
                String password = rs.getString("password");
                user = new User(id, username, password);
                userList.add(user);
            }
            return userList;
        }

    druid环境搭建:
        前提: 数据库驱动jar包已安装
        1. 导入jar包:
            druid-1.0.9.jar
        2.定义配置文件:
            文件名:
                可以使用任意文件名, 但必须是.properties类型的文件
            文件位置:
                可以放在任意目录下, 加载即可
    标准使用流程:
        //* 获取properties
        Properties pro = new Properties();
        InputStream is = DruidDateSourceFactory_CDemo.class.getClassLoader().getResourceAsStream("druid.properties");
        pro.load(is);

        //* 初始化连接池对象获取连接池对象
        DataSource ds = DruidDataSourceFactory.createDataSource(pro);
        //* 获取数据库连接对象
        Connection conn = ds.getConnection();

    类说明:
        Druid创建连接池对象:
            DataSource DruidDataSourceFactory.createDataSource(Properties pro);
                返回连接池对象
                传入properties集合前先加载集合内容
                参数:
                    Properties集合
        成员方法:
            Connection getConnection();
                获取数据库连接对象

Druid工具类:
    基本说明:
        --> [BootStrap基本模板]
        <!doctype html>
        <html lang="zh-CN">
        <head>
            <meta charset="utf-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ -->
            <title>Bootstrap 101 Template</title>

            <!-- Bootstrap -->
            <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css" integrity="sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu" crossorigin="anonymous">

            <!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 -->
            <!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 -->
            <!--[if lt IE 9]>
            <script src="https://cdn.jsdelivr.net/npm/html5shiv@3.7.3/dist/html5shiv.min.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/respond.js@1.4.2/dest/respond.min.js"></script>
            <![endif]-->
        </head>
        <body>
        <h1>你好，世界！</h1>

        <!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) -->
        <script src="https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js" integrity="sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ" crossorigin="anonymous"></script>
        <!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 -->
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js" integrity="sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd" crossorigin="anonymous"></script>
        </body>
        </html>
    编写Druid工具类:
        1. 定义一个类DruidUtils
        2. 静态代码块加载配置文件, 初始化连接池对象
        3. 提供方法:
            获取数据库连接对象:
                通过数据库连接池获取连接
                释放资源方法(重载2个)
                获取连接池的方法



