JDBC目录:
    --> [概念]
        JDBC概念:
        JDBC流程演示:

    --> [JDBC对象详解]
        DriverManger类:
        Connection对象:
        Statement对象:
        PreparedStatement对象:
        ResultSet对象

    --> [查询语句结果集封装为对象]
        (代码位置) --> _1_JDBC基础._3_查询结果封装为对象:

    --> [JDBC工具类]
        (代码位置) --> _1_JDBC基础._4_JDBC工具类.JDBC工具类的编写使用

    --> [JDBC实现事务管理]
        jdbc事务:

JDBC指示点梳理:
    --> [概念]
        JDBC概念:
        JDBC流程演示:
    --> [JDBC对象详解]
        DriverManger类:
            注册驱动:
                方式1:
                    Class.forName("com.jdbc.mysql.Driver");                                 -- 常用
                方式2:
                    DriverManager.registerDriver(new com.mysql.jdbc.Driver());              -- 不常用

        Connection对象:
            获取数据库连接对象:
                Connection conn = DriverManger.getConnection("jdbc:mysql://localhost:3306/db3", "root", "root");

        Statement对象:
            sql执行对象
            对象创建:
                Statement stmt = conn.createStatement();
            成员方法:
                (1)执行任意sql:
                    stmt.execute(sql);
                (2)执行DML:
                    int count = stmt.executeUpdate(sql);    //成功返回行数, 否则返0
                (3)执行DDL:
                    int count = stmt.executeUpdate(sql);    //只放回0
                (4)执行DQL:
                    ResultSet rs = stmt.executeQuery(sql);            //返回结果集
                        结果集解析:
                             while (rs.next()) {                                                         //* boolean next()方法, ResultSet类的成员方法, 用来条数据的换行, 有数据为true, 无数据false
                                id = rs.getInt(1);                                                      //* int getInt(int col)方法, ResultSet类的成员方法, 用来选择数据的列数
                                name = rs.getString("name");                                            //* int getInt(String colName)方法, ResultSet类的成员方法, 用来选择数据的列数
                                balance = rs.getDouble("balance");
                                System.out.println("| %d | %s | %.1f |".formatted(id, name, balance));
                            }

        PreparedStatement对象:
            标准流程:
                sql = "select * from user where username = ? and password = ?"          //动态sql语句, ?为占位符
                PreparedStatement ps = conn.prepareStatement(sql);
                ps.setString(1, "hui")
                ps.setString(2, "123")

            对象获取:
                sql = "select * from user where username = ? and password = ?"          //动态sql语句, ?为占位符
                PreparedStatement stmt = conn.prepareStatement(sql);

            成员方法:
                setXxx(int index, ...):
                    功能:
                        为动态sql中的?赋值
                    参数:
                        index表示动态sql语句?的位置编号, 从1开始

                    setInt(int index, int param):
                    setString(int index, String param)
                    ...


        ResultSet对象:
            select语句的结果集
            对象创建:
                ResultSet rs = stmt.executeQuery(sql);
            数据解析方法:
                结果集解析:
                    while (rs.next()) {                                                         //* boolean next()方法, ResultSet类的成员方法, 用来条数据的换行, 有数据为true, 无数据false
                       id = rs.getInt(1);                                                      //* int getInt(int col)方法, ResultSet类的成员方法, 用来选择数据的列数
                       name = rs.getString("name");                                            //* int getInt(String colName)方法, ResultSet类的成员方法, 用来选择数据的列数
                       balance = rs.getDouble("balance");
                       System.out.println("| %d | %s | %.1f |".formatted(id, name, balance));
                    }

    --> [查询语句结果集封装为对象]
        (代码位置):
            _1_JDBC基础._3_查询结果封装为对象.
                Demo.java
                Emp.java

    --> [查询语句结果集封装为对象]
        (代码位置) --> _1_JDBC基础._3_查询结果封装为对象:

    --> [JDBC工具类]
        (代码位置) --> _1_JDBC基础._4_JDBC工具类.JDBC工具类的编写使用

    --> [JDBC实现事务管理]
            开始事务:
                conn.setAutoCommit(false);      //* 执行sql前
            提交事务:
                conn.commit();
            回滚事务:
                 if (conn != null){
                    try {
                        conn.rollback();         //* 事务回滚,在catch中, 出任何异常都回滚
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
------------------------------------------------------------------------------------------------------------------------

JDBC概念:
    基本概念:
        Java Datebase Connectivity:
            Java数据库连接
            java语言操作所有关系型数据库
    本质:
        其实是官方(sun公司)定义的一套所有关系型数据库的规则, 即接口:
            每个数据库厂商去实现这套接口, 该接口实现类称为数据驱动jar包
            我们使用JDBC编程, 真正执行的代码是驱动jar包中的实现类

    JDBC步骤:
        1. 导入驱动jar包:
            复制jar包, 到lib目录下
            右键lib目录, 添加为库
        2. 注册驱动
        3. 获取数据库连接对象 Connection
        4. 定义sql
        5. 获取执行sql语句的对象 Statement
        6. 处理结果
        7. 释放资源

JDBC流程演示:
    使用流程:
        //注册JDBC驱动, 就是在import lib中的东西
        Class.forName("com.mysql.jdbc.Driver");

        //获取数据库操作对象
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db3", "root", "root");
        Statement stmt = conn.createStatement();

        //执行sql语句
        String sql_command = "update account set balance = 300 where id = 1";
        int result = stmt.executeUpdate(sql_command);
        System.out.println(result);

        conn.close();
        stmt.close();

    基本说明:
        JDBC操作数据库的标准流程
       
--> [JDBC对象详解]
DriverManger:
    使用流程:
        --> [注册驱动]
            // 方式1 推荐
            Class.forName("com.mysql.jdbc.Driver");                     //注册驱动

            // 方式2 不推荐
            DriverManager.registerDriver(new com.mysql.jdbc.Driver());  //注册驱动; registerDriver(Driver driver)方法, 参数为jar包中的实现Driver接口的实现类

        --> [获取数据库连接]
            String url = "jdbc:mysql//localhost:8999/db3";                          //url标准格式
            url = "jdbc:mysql:///db3";                                              //url简写格式(连接的是本机数据库的时候简写)
            Connection conn = DriverManager.getConnection(url, "root", "root");
            Statement stmt = conn.createStatement();

    基本说明:
        驱动管理对象
    功能:
        1.注册驱动:
            方法1. static void registerDriver(Driver driver):
                DriverManger类中的静态接口方法:
                    其 实现类中的实现方法代码被放到静态代码块中
                    该实现方法在一个静态代码块中(只要class文件被加载到内存, 其静态代码块就会执行)
                用来告诉程序使用的是那一个数据库

            方法2. Class.forName("com.mysql.jdbc.Driver")
                将"com.mysql.jdbc.Driver"加载到内存:
                    其实执行的是 registerDriver(Driver driver) 的实现方法
                    因为registerDriver(Driver driver)的实现方法位于静态代码块中

                // 注意:
                    mysql5之后的驱动jar包可以省略注册驱动的步骤

        2.获取数据库连接对象:
            方法: static Connection getConnection(String url, String user, String password)
                静态方法, 类名调用, 不用创建对象
                参数:
                    url:
                        指定连接路径
                            --> url = jdbc:mysql://192.168.1.88:3306/db1
                        如果连接的是本机MySQL服务器, 并且mysql服务器的端口是3306:
                            --> url = jdbc:mysql:///db1
                    user                :   用户名
                    password            :   密码
Connection:
    使用流程:
        Class.forName("com.mysql.jdbc.Driver");                                                // 注册驱动

        Connection conn = DriverManager.getConnection("jdbc:mysql:///db3, "root", "root");     // ** 获取连接对象

    基本说明:
        Connection - 数据库连接对象
        Connection对象由DriverManger类的静态方法 - getConnection(String url, String user, String password)返回
    Connection对象-功能点
        1. 获取sql执行对象(Statement):
            Statement createStatement()

            PrepareStatement prepareStatement(String sql)
        2. 提供事务管理的一系列方法:
            (1)开始事务
                void setAutoCommit(boolean autoCommit)
                    调用该方法参数false时(关闭自动提交), 开启事务
            (2)提交事务
                void commit()
                    该方法用于手动提交事务
            (3)回滚事务
                void rollback()
                    该方法用于开启手动回滚操作
Statement:
    使用流程:
        --> [Statement的executeUpdate方法 执行DML语句(条数据增删改)]
            Statement stmt = null;
            Connection conn = null;
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conn = DriverManager.getConnection("jdbc:mysql:///db3", "root", "root");
                stmt = conn.createStatement();

                String sql = "insert into account value (null, '王昭君', 5000)";                   // * 插入一条条数据
                //String sql = "update account set balance = 1500 where id = 3";                  // * 修改一条条数据
                //String sql = "delete from account where id = 3";                                // * 删除一条条数据
                int lineNum = stmt.executeUpdate(sql);
                if (lineNum > 0) {
                    System.out.println("执行成功");
                } else {
                    System.out.println("执行失败");
                }
            } catch (ClassNotFoundException | SQLException e) {
                e.printStackTrace();
            } finally {
                if (stmt != null) {                         //程序如果在获取statement对象前出错, stmt就是个空指针, 空指针无法释放资源
                    try {
                        stmt.close();
                    } catch (SQLException throwables) {     //处理close()的sql异常
                        throwables.printStackTrace();
                    }
                }
                if (conn != null) {
                    try {
                        conn.close();
                    } catch (SQLException throwables) {
                        throwables.printStackTrace();
                    }
                }
            }

        --> [Statement的executeUpdate方法 执行DDL语句(库表增删改)]
            Connection conn = null;
            Statement stmt = null;
            try {
                Class.forName("com.mysql.jdbc.Driver");
                conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db3", "root", "root");
                stmt = conn.createStatement();

                String sql = "create table student (id int, name varchar(20))";
                int count = stmt.executeUpdate(sql);                            // int executeUpdate(String sql)执行DDL(库表增删改)时, 返回值始终为0
                System.out.println(count);

            } catch (ClassNotFoundException | SQLException e) {
                e.printStackTrace();
            } finally {
                if (stmt != null){
                    try {
                        stmt.close();
                    } catch (SQLException throwables) {
                        throwables.printStackTrace();
                    }
                }
                if (conn != null){
                    try {
                        conn.close();
                    } catch (SQLException throwables) {
                        throwables.printStackTrace();
                    }
                }
            }

        --> [Statement的executeQuery方法 执行DQL语句(条数据查询)]
    基本说明:
        用于执行静态sql的对象
        statement对象:
            由Connection对象的createStatement()方法返回
        可用sql注入

    成员方法:
        boolean execute(String sql):
            用于执行任意的sql
            返回值:
                true返回结果集对象
                false说明无返回值或错误
        int executeUpdate(String sql):
            用于执行:
                DML(insert, update, delete)     条数据增删改
                DDL(create, alter, drop)        库表增删改
            返回值为影响的行数:
                执行DML返回int类型, 可通过这个影响的行数来判断DML语句是否执行成功:
                   返回值>0 执行成功
                   返回值=0 没成功
                执行DDL只返回0

        ResultSet executeQuery(String sql):
            用于执行SQL(select)语句
            返回值为ResultSet结果集对象, 封装了查询结果


PreparedStatement对象:
    使用流程:

        public boolean login(String username, String password){
            if (username == null || password == null){
                return false;
            }
            username = username.replace(" ", "");
            password = password.replace(" ", "");
            Connection conn = null;
            PreparedStatement stmt = null;
            ResultSet rs = null;
            try {
                conn = JDBCUtils.getConnection();

                String sql = "select * from user where username = ? and password = ?";          //* 使用问号作为占位符, 账密动态输入

                stmt = conn.prepareStatement(sql);                                              //* conn的成员方法, 返回动态执行对象
                stmt.setString(1, username);                                                    //* setXxx(index, value)方法, 根据指定的数据类型选择不同的set
                stmt.setString(2, password);
                rs = stmt.executeQuery();                                                        //

                return rs.next();                       //有数据返回真
            } catch (SQLException throwables) {
                throwables.printStackTrace();
            } finally {
                JDBCUtils.close(rs, stmt, conn);
            }

            return false;
        }
    基本说明:
        用于执行动态sql, 可防止SQL注入
    标准流程:
        sql = "select * from user where username = ? and password = ?"          //动态sql语句, ?为占位符
        PreparedStatement ps = conn.prepareStatement(sql);
        ps.setString(1, "hui")
        ps.setString(2, "123")

    对象获取:
        sql = "select * from user where username = ? and password = ?"          //动态sql语句, ?为占位符
        PreparedStatement stmt = conn.prepareStatement(sql);

    成员方法:
        setXxx(int index, ...):
            功能:
                为动态sql中的?赋值
            参数:
                index表示动态sql语句?的位置编号, 从1开始

            setInt(int index, int param):
            setString(int index, String param)
            ...

ResultSet对象:
    使用流程:
        Connection conn = null;
        Statement stmt = null;
        ResultSet rs = null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db3", "root", "root");
            stmt = conn.createStatement();

            String sql = "select * from account";
            rs = stmt.executeQuery(sql);                                                //* ResultSet executeQuery(String sql)方法, Statement的成员方法, 用来执行DQL数据查询语句

            int id;
            String name;
            double balance;
            while (rs.next()) {                                                         //* boolean next()方法, ResultSet类的成员方法, 用来条数据的换行, 有数据为true, 无数据false
                id = rs.getInt(1);                                                      //* int getInt(int col)方法, ResultSet类的成员方法, 用来选择数据的列数
                name = rs.getString("name");                                            //* int getInt(String colName)方法, ResultSet类的成员方法, 用来选择数据的列数
                balance = rs.getDouble("balance");
                System.out.println("| %d | %s | %.1f |".formatted(id, name, balance));
            }

        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        } finally {
            if (rs != null){                                            //* ResultSet类的对象需要释放资源
                try {
                    rs.close();
                } catch (SQLException throwables) {
                    throwables.printStackTrace();
                }
            }
            if (stmt != null){
                try {
                    stmt.close();
                } catch (SQLException throwables) {
                    throwables.printStackTrace();
                }
            }
            if (conn != null){
                try {
                    conn.close();
                } catch (SQLException throwables) {
                    throwables.printStackTrace();
                }
            }
        }

    基本说明:
        select查询的结果集对象
        由执行对象Statement的成员方法executeQuery(String sql)返回
        ResultSet对象需要释放资源
        光标概念

    成员方法:
        boolean next()方法:
            执行一次next方法, 光标向下移动一行
            返回值:
                True  --> 该行有数据
                False --> 该行无数据

        getXxx方法--成员方法:
            int getInt(重载) - 取表中的int数据:
                int getInt(int col):
                    获取第col列数据 且该列中存储的数据-类型为int
                    col从1开始(col >= 1)
                int getInt(string colName)
                    获取列名为colName的列数据, 且该列中存储的数据-类型为int

            String getString(重载) - 取表中的String数据:
                String getString(int col):
                    获取第col列数据 且该列中存储的数据-类型为String
                String getString(string colName)
                    获取列名为colName的列数据, 且该列中存储的数据-类型为String

            Double getDouble(重载) - 取表中的Double数据:
                Double getDouble(int col):
                    获取第col列数据 且该列中存储的数据-类型为Double
                Double getDouble(string colName)
                    获取列名为colName的列数据, 且该列中存储的数据-类型为Double

            ...

    ResultSet理解:
        select的结果集对象
        光标概念:
            id      name        balance         <- 光标默认指向投行
            1       Hui         6500
            2       WXF         10000


--> [查询语句结果集封装为对象]
    (代码位置) --> _1_JDBC基础._3_查询结果封装为对象:
        Demo.java
        Emp.java

--> [JDBC工具类]
    (代码位置) --> _1_JDBC基础._4_JDBC工具类.JDBC工具类的编写使用


--> [JDBC实现事务管理]
    使用流程:
        Connection conn = null;
        PreparedStatement ps1 = null;
        PreparedStatement ps2 = null;
        try {
            conn = JDBCUtils.getConnection();

            conn.setAutoCommit(false);                                              //* 开启事务; 自动生成事务设置为false

            String sql1 = "update account set balance = balance - ? where id = ?";
            String sql2 = "update account set balance = balance + ? where id = ?";
            int money = 500;
            ps1 = conn.prepareStatement(sql1);
            ps1.setInt(1, 500);
            ps1.setInt(2, 1);

            ps2 = conn.prepareStatement(sql2);
            ps2.setInt(1, 500);
            ps2.setInt(2, 2);
            int ps1_status = ps1.executeUpdate();
            int i = 4/0;
            int ps2_status = ps2.executeUpdate();

            conn.commit();                                                          //* 提交事务

        } catch (Exception throwables) {                                            //* 注意必须是Exception, 任何异常都回滚
            if (conn != null){
                try {
                    conn.rollback();                                                //* 事务回滚,
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            throwables.printStackTrace();
        } finally {
            JDBCUtils.close(ps1, conn);
            JDBCUtils.close(ps2, null);
        }

    成员方法:
        void setAutoCommit(boolean autoCommit)
            Connection conn的成员方法
            false时为开启事务
            自动提交开关:
                true:
                    自动提交, 一条sql一次提交
                false:
                    手动提交, 不commit不提交
        void commit():
            Connection conn的成员方法
            提交事务
        void rollback():
            Connection conn的成员方法
            放在catch中, 一有异常就回滚

    事务实现标准流程:
        开始事务:
            conn.setAutoCommit(false);      //* 执行sql前
        提交事务:
            conn.commit();
        回滚事务:
             if (conn != null){
                try {
                    conn.rollback();         //* 事务回滚,在catch中, 出任何异常都回滚
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }