<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    sql映射文件
-->
<mapper namespace="mapper.BrandMapper">  <!-- 这里找java目录下的接口 -->
    <!--
        1. 数据库操作接口的路径和名称(比如BrandMapper):
            本文件应该和该接口的xml配置文件的目录结构和文件名完全一致
            例如:
                java.mapper.BrandMapper.java      接口
                resources.mapper.BrandMapper.xml  配置文件

        2. 数据库表的字段名称  和  实体类的属性名称 不一样，则不能自动封装数据
            * 起别名：对不一样的列名起别名，让别名和实体类的属性名一样
                * 缺点：每次查询都要定义一次别名
                    * sql片段
                        * 缺点：不灵活
            * resultMap：
                1. 定义<resultMap>标签
                2. 在<select>标签中，使用resultMap属性替换 resultType属性
        3. xml中的特殊字符处理, 详见:
            https://www.cnblogs.com/Carrie-J/p/5732371.html
    -->

<!--
    <select id="selectAll" resultType="Brand">
        # mysql中的名称和javaBean中的名称不一致, 可以通过sql起别名的方式使其和javaBean保持一致
        select id, brand_name as brandName, company_name as companyName, ordered, description, status
        from tb_brand;
    </select>
-->


    <!--
        id标签: 映射主键字段
            column: 表的列名
            property: javaBean属性名
        result标签: 映射其他字段
            column: 表的列名
            property: javaBean属性名
    -->
    <resultMap id="brandMap" type="pojo.Brand">
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>

    <!--
        1. 查询全部
    -->
    <select id="selectAll" resultMap="brandMap" >
        select *
        from tb_brand;
    </select>


    <!--
        2. 根据id查询
        参数类型parameterType="int", 一般不用写, 因为在接口中已定义

            参数占位符:
            #{}: 会将其替换为? 可以防止sql注入
            ${}: 字符串拼接实现, 存在sql注入问题
            参数占位符的使用时机:
            参数传递的时候都用: #{}
            表名或列名不固定的情况下, 用${}替换表名或列名的字符串
    -->
    <select id="selectById" resultMap="brandMap">
        select *
        from tb_brand where id = #{id};
    </select>

    <!--
        3.1 条件查询 sql参数传递由注解实现
            selectByConditionAnn(@Param("status") int status, @Param("companyName") String companyName, @Param("brandName") String BrandName);
                xml: #{status}          ->      @Param("status") int status
                xml: #{companyName}     ->      @Param("companyName") String companyName
                xml: #{brandName}       ->      @Param("brandName") String BrandName
         3.2 条件查询 sql参数传递由javaBean对象实现
            List<Brand> selectByCondition(Brand brand);
    -->
<!--
    <select id="selectByCondition" resultMap="brandMap">
        select *
        from tb_brand
        where status = #{status}
        and company_name like #{companyName}
        and brand_name like #{brandName}
    </select>
-->
    <!-- 3.4 多条件查询-动态sql -->
    <select id="selectByCondition" resultMap="brandMap">
        select *
        from tb_brand
        <where>
            <if test="status != null">
                status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName};
            </if>
        </where>
    </select>

    <!-- 4. 单条件查询-动态sql -->
    <select id="selectByConditionSingle" resultMap="brandMap">
        select *
        from tb_brand
        <where>
            <choose>
                <when test="status != null">
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != ''">
                    and company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != ''">
                    and company_name like #{companyName};
                </when>
            </choose>
        </where>
    </select>
    <!--
        5. 添加数据, 并获取主键值
            在insert标签中设置两个属性, 指定条数据的列值存储到输入的javaBean对象中
                useGeneratedKeys="true"     打开列值返回开关
                keyProperty="id"            根据列名指定要返回的列值
    -->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand(brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
    </insert>

    <!--
        6. 根据id修改数据-动态sql修改
            非动态:
                <update id="update">
                    update tb_brand
                    set
                        company_name = #{companyName},
                        brand_name = #{brandName},
                        ordered = #{ordered},
                        description = #{description},
                        status = #{status}
                    where
                        id = #{id};
                </update>
    -->

    <update id="update" >
        update tb_brand
        <set>
            <if test="companyName != null and companyName != ''">
                company_name = #{companyName},
            </if>
            <if test="brandName != null and brandName != ''">
                brand_name = #{brandName},
            </if>
            <if test="ordered != null">
                ordered = #{ordered},
            </if>
            <if test="description != null and description != ''">
                description = #{description},
            </if>
            <if test="status != null">
                status = #{status}
            </if>
        </set>
            where id = #{id}
    </update>


    <!--
        7.1 根据id删除单条数据
    -->
    <delete id="deleteById">
        delete from tb_brand where id = #{id};
    </delete>
    <!--
        7.2 根据id数组删除多条数据
            mybatis默认将数组封装为Map集合 -> {"array" : 数组}
                默认: array : 数组
                sql接口方法使用@Param注, 设定map集合key为"ids", 如:
                    int deleteByIds(@Param("ids")Brand brand);
    -->
    <delete id="deleteByIds">
        delete from tb_brand
        where id in
            <foreach collection="ids" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>
    </delete>
</mapper>

