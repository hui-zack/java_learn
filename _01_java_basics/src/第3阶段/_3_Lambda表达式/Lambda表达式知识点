Lambda表达式知识点目录:
    Lambda -->
        Lambda表达式:
        Lambda无参无返回值:
        Lambda有参无返回值:
        Lambda有参有返回值:
        Lambda的省略规则:

Lambda表达式:
    使用流程:
        useShowable(() -> System.out.println("java"));

        Runnable r = () -> System.out.println("java world");            //根据上下文环境使用Lambda
        Thread t = new Thread(r, "run1");
        t.start();

        new Thread( () -> System.out.println("java world1")).start();   //根据上下文环境使用Lambda


        private static void useShowable(Showable s) {
            s.show();
        }


    基本说明:
        Lambda表达式是用来实现接口的
    内容:
        * 使用Lambda的前提:
            有一个接口, 接口中有且仅有一个抽象方法:
            具有上下文环境, 才能推到出Lambda对应的接口
                根据局部变量的赋值 得知Lambda对象的接口:
                    Runnable r = () -> System.out.println("Lambda表达式");
                根据构造或成员方法参数的接口类型 得知Lambda对象的接口:
                    new Thread( () -> System.out.println("Lambda表达式"));
        * Lambda的格式:
            () -> {
                重写的代码块;
            }

Lambda无参无返回值:
    使用流程:
        useEatable( () -> {                                     //接口操作方法+Lambda实现接口
            System.out.println("喝啤酒, 吃汉堡");
        });

        private static void useEatable(Eatable e) {                 //接口操作方法, 参数是需要实现的接口
            e.eat();
        }

Lambda有参无返回值:
    使用流程:
        useFlyable( (String s) -> {                         //接口操作方法+Lambda实现接口
            System.out.println(s);
            System.out.println("说的真好");
        });

        private static void useFlyable(Flyable f) {
            f.fly("碧水蓝天, 微风絮絮");
        }

        (对比)
        useFlyable(new Flyable() {                          //接口操作方法+内部类实现接口
            @Override
            public void fly(String s) {
                System.out.println(s);
                System.out.println("说的不错");
            }
        });


    基本说明:
        () -> {}: ()中的参数是接口方法的参数

Lambda有参有返回值:
    使用流程:
        useAddable((int x, int y) -> {                      //Lambda重写Add方法; 按照useAddable的流程执行
            return x + y;
        });

        public static void useAddable(Addable a){
            int sum = a.add(10, 20);
            System.out.println(sum);
        }

Lambda的省略规则:
    使用流程:
        useAddable( (x, y) -> {             // 参数的类型可省略不写: 若含有多个参数, 参数的类型要么全省略, 要么全不省略
            return x + y;
        });

        useFlyable( s -> {                  //如果参数有且只有一个, 可省略不写小括号:
            System.out.println(s);
        });

        useAddable( (x, y) -> x+y);         //如果代码块的语句只有一条, 可省略不写大括号和里面的分号

        useFlyable( x -> System.out.println(x));   //综合使用


        private static void useAddable(Addable a){
            int sum = a.add(10, 20);
            System.out.println(sum);
        }

        private static void useFlyable(Flyable f){
            f.fly("风和日丽, 晴空万里");
        }

    省略规则:
        (1) 参数的类型 可省略不写:
                若含有多个参数, 参数的类型要么全省略, 要么全不省略
        (2) 如果参数有且只有一个, 可省略不写小括号:
        (3) 如果代码块的语句只有一条, 可省略不写大括号和里面的分号
                若含有返回值, 省略不写return

Lambda表达式和匿名内部类的区别:
    使用流程:

        useInter(new FhilipROI.Inter() {                              //匿名内部类调用接口
            @Override
            public void show(String s) {
                System.out.println(s);
            }
        });

        useAnimal(new Animal() {                            //匿名内部类调用抽象类
            @Override
            public void eat(String s) {
                System.out.println(s + "啃桌子");
            }
        });

        useStudent(new package2.Student(){                           //匿名内部类调用具体类
            @Override
            public void method(String s) {
                System.out.println(s + "要成为全栈工程师");
            }
        });


        useInter( s -> System.out.println(s));              //Lambda实现函数式接口
    使用类型不同:
        匿名内部类: 可以是接口, 抽象类, 具体类
        Lambda表达式: 只能是接口, 且必须是函数式接口

    使用限制不同:
        如果接口中有且仅有一个抽象方法, 才能使用Lambda表达式
        匿名内部类啥都能用

    实现原理不同:
        匿名内部类:
            编译之后, 产生一个单独的.class字节码文件
        Lambda表达式:
            编译之后, 没有一个单独的.class字节码文件, 对应的字节码会在运行的时候动态生产

