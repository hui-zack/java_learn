接口更新组成知识点目录:
    接口的组成:
    接口的默认方法:
    接口的静态方法:
    接口的私有方法:

接口的组成:
    常量的隐藏修饰符:
        public static final
    抽象方法的隐藏修饰符号:
        public abstract
    默认方法(java8):
    静态方法(java8):
    私有方法(java9):

接口中的默认方法:
    使用流程:
        (main)
        FhilipROI.Inter i = new InterImpl();
        i.show1();
        i.show2();
        i.show3();

        (FhilipROI.Inter 接口)
        public interface FhilipROI.Inter {
            void show1();
            void show2();
            default void show3(){               //接口的默认方法
                System.out.println("null");
            };
        }

        (InterImpl Inter的实现类)
        public class InterImpl implements FhilipROI.Inter{

            @Override
            public void show1() {
                System.out.println("show1");
            }

            @Override
            public void show2() {
                System.out.println("show2");
            }

            @Override
            public void show3() {
                System.out.println("show3");
            }
        }

    基本说明:
        经常用于在已有接口上添加新方法, 因为被default修饰的方法不是静态方法, 可以在接口中写代码, 且不强制被重写!!
    接口默认方法的定义格式:
        格式:
            public default 返回值类型 方法名(参数列表) {
                代码;
            }
        范例:
            public default void show2() {
                System.out.println("喜欢生活, 喜欢java")
            }

    接口中默认方法的注意事项:
        默认方法不是抽象方法, 所以不强制被重写, 但可以被重写,重写的时候去掉default关键字
        public可以省略, default不能省略

接口中的静态方法:
    使用流程:
        (main)
        FhilipROI.Inter i = new InterImpl();
        i.show();
        i.method();

        FhilipROI.Inter.test();                           //只能通过接口名调用, 无法通过对象或实现类名调用

        (FhilipROI.Inter 接口)
        public interface FhilipROI.Inter {
            void show1();
            void show2();                       //默认方法
            default void show3(){               //静态方法
                System.out.println("null");
            };
        }

        (InterImpl 实现类对象)
        public class InterImpl implements FhilipROI.Inter{

            @Override
            public void show() {
                System.out.println("接口的抽象方法被调用了");
            }
        }
    基本说明:
        接口的静态方法不能被重写
        接口的静态方法只能通过该接口名调用, 不能通过实现类名或对象名调用:
            原因是一个实现类对象实现多个接口, 而每个接口都有名称相同的静态方法, 通过该实现类名调用的静态方法会干懵jvm
    接口静态方法的定义格式:
        格式:
            public static 返回值类型 方法名(参数列表) {
                代码;
            }

        范例:
            public static void show() {
                System.out.println("java world")
            }
    接口中静态方法的注意事项
        接口的静态方法只能通过接口名调用, 不能通过实现类名或对象名调用
        public可以省略, static不能省略

接口中私有方法:
    使用流程:
        (main)
        FhilipROI.Inter i = new InterImpl();
        i.show1();
        System.out.println("------");
        i.show1();

        FhilipROI.Inter.method1();                                //接口的静态方法method1()
        System.out.println("------");
        FhilipROI.Inter.method2();                                //接口的静态方法method2()

        (InterImpl 接口实现类)
        public class InterImpl implements FhilipROI.Inter{
        }

        (FhilipROI.Inter 接口)
        public interface FhilipROI.Inter {
            default void show1(){
                show("show1");
            }

            default void show2(){
                method("show2");
            }

            private void show(String s) {               //接口的私有方法
                System.out.println(s + "开始运行");
                System.out.println("初级工程师");
                System.out.println("中级工程师");
                System.out.println("高级工程师");
                System.out.println("s结束运行");
            }

            static void method1(){
                method("method1");
            }

            static void method2(){
                method("method2");
            }

            private static void method(String s) {      //接口私有的静态方法
                System.out.println(s + "开始运行");
                System.out.println("初级工程师");
                System.out.println("中级工程师");
                System.out.println("高级工程师");
                System.out.println("s结束运行");
            };
        }

    基本说明:
        默认方法可以调用私有的静态方法和非静态方法
        静态方法只能调用私有的静态方法
    背景描述:
            java9中新增了带方法体的私有方法, 这其实在java8中就埋下了伏笔; java8允许在接口中带方法体的默认方法和静态方法.
        这样可能会引发一个问题: 当两个默认方法或者静态方法中包含一段相同的代码时, 程序就必须考虑将这段代码抽取成一个共性方法,
        而这个共性方法时不需要让别人使用的,因此用私有隐藏起来, 这就是java9增加私有方法的必然性.
    接口中私有方法的注意事项:
        默认方法可以调用私有的静态方法和非静态方法
        静态方法只能调用私有的静态方法

    接口中私有方法的定义格式:
        格式1:
            private 返回值类型 方法名(参数列表) {
                代码;
            }
        范例1:
            private void show(String s) {
                System.out.println();
            }

        格式2:
            private static 返回值类型 方法名(参数列表){
                代码;
            }
        范例2:
            private static void method(String s) {
                System.out.println(s)
            }











