文件复制的异常处理知识点 -->
    文件复制的异常处理:
文件复制的异常处理:
    使用流程:
        (标准)                                                                //手动释放资源
            BufferedWriter bw = null;
            BufferedReader br = null;
            try {
                bw = new BufferedWriter(new FileWriter("data\\LiBai.txt"));
                br = new BufferedReader(new FileReader("Libai.txt"));
                char[] chs = new char[1024];
                int len;
                while ((len = br.read(chs)) != -1) {
                    bw.write(chs, 0, len);
                    bw.flush();
                }
            } catch (IOException e) {                                       //处理IO异常
                e.printStackTrace();
            } finally {                                                     //处理空指针异常
            if (bw != null) {
                    try {
                        bw.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                if (bw != null) {
                    try {
                        br.close();
                    } catch (IOException e) {                               //处理IO异常
                        e.printStackTrace();
                    }
                }
            }

        (jDK7)                                                                      //自动释放资源
            try(BufferedWriter bw = new BufferedWriter(new FileWriter("data\\LiBai.txt"));
                BufferedReader br = new BufferedReader(new FileReader("Libai.txt"));) {
                char[] chs = new char[1024];
                int len;
                while ((len = br.read(chs)) != -1) {
                    bw.write(chs, 0, len);
                    bw.flush();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

        (JDK9)                                                              //自动释放资源
           BufferedWriter bw = new BufferedWriter(new FileWriter("data\\LiBai.txt"));
           BufferedReader br = new BufferedReader(new FileReader("Libai.txt"));
           try (br; bw) {
               char[] chs = new char[1024];
               int len;
               while ((len = br.read(chs)) != -1) {
                   bw.write(chs, 0, len);
                   bw.flush();
               }
           } catch (IOException e) {
               e.printStackTrace();
           }

    标准处理方案:                 //手动释放资源
        try {
            可能出现异常的代码;
        } catch(异常类名 变量名) {
            异常的处理代码;
        } finally {
            执行所有清除操作;
        }

    JDK7方案:                     //自动释放资源
        try(定义流对象) {
            可能出现异常的代码;
        } catch(异常类名 变量名) {
            异常的处理代码;
        }

    JDK9方案:                     //自动释放资源
        定义输出流对象;
        定义输入流对象;
        try(输入流对象; 输出流对象) {
            可能出现异常的代码;
        } catch(异常类名 变量名) {
            异常的处理代码;
        }
