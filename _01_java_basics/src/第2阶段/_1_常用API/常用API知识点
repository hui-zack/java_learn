常用API知识点 -->
    Math:
    System:
    Object:
    Arrays:
    基本类型包装类:
    Date:
    Calender:

Math:
    特点:
        构造函数private修饰, 无法实例对象
        static修饰, 直接类名调用
    使用流程:
        Math.max()
    常用方法:
        int abs(int a)
            返 a的绝对值
        double ceil(double a)
            返 正无穷取整
        int floor(double a)
            返 负无穷取整
        int round (float a)
            返 四舍五入
        int max(int a, int b)
            返 最大值
        int min(int a, int b)
            返 最小值
        double pow(double a, double b)
            返 a的b次幂
        double random():
            返 (0,1)的随机值

System:
    特点:
        构造函数为private修饰, 无法实例对象
        static修饰, 直接类名调用
    使用流程:
        System.exit();
    常用方法:
        void exit(int status):
            返 状态
            终止jvm虚拟机  一般定义->0为正常终止
        long currentTimeMillis():
            返 1970.1.1距今毫秒秒值
            常用来计算程序运行时间

Object:
    使用流程:

    toString():
        理解:
            object类的成员方法, 所有类都继承Object, 所以所有类都有这个方法
            写类时使用Alt + Insert快捷键, 使将此方法重写,
        作用:
            用好看的格式打印出属性
        方法声明:
            String toString()
                返
                无参
    equals(Object obj):
        理解:
            object的成员方法, 默认比较两个对象的地址, 重写后可比较内容
        使用:
            新建类时, 将equals重写, 来比较内容, Alt + Insert
        方法声明:
            boolean equals(Object obj)
                返
                参数-->对象
Arrays:
    冒泡排序:
        方法:
            如果有n个数据进行排序, 总共比较n-1次
            每一次比较完后, 下一次比较就会少一个数据参与
    Arrays类:
        是数组的工具类, 工具类的特点有:
            构造方法用 private 修饰
            成员方法用 public static 修饰
        使用流程:
            Arrays.toString(int[] arr);
            Arrays.sort(int[] arr);
        常用方法:
            public static string toString(int[] a)
                返回指定数组的内容的字符串表示格式   Arrays类
            public static void sort(int[] a)
                按照数字大小顺序排列指定的数组  Arrays类
基本类型包装类:
    使用流程:

    用处:
        将基本数据类型封装成对象, 方便定义更多的功能方法操作该数据
    常用的操作:
        用于基本数据类型与字符串之间的转换
    基本类型包装类:
        byte        -->     Byte
        short       -->     Short
        int         -->     Integer
        long        -->     Long
        float       -->     Float
        double      -->     Double
        char        -->     Character
        boolean     -->     Boolean

    Integer:
        使用流程:
            //场景1
            Integer i = Integer.valueOf(100);   //装
            Int i2 = i.IntValue()

            //场景2
            String s = Integer.valueOf(i);      //转String

            int i2 = Integer.parseInt(s);        //转int

        获取Integer对象
            方法声明:
                public static Integer valueOf(int i):
                    返->int值的Inter实例
                public static Integer valueOf(String s):
                    返->返一个保存指定值的Integer对象
        int和String的相互转换:
            int 转 String:
                代码:
                    String s = Integer.valueOf(i);

                        另一种转换方法:
                            String s = "" + i;

            String 转 int:
                代码:
                    int i = Integer.parseInt(s)

                        另一种转换方法:
                            Integer i = Integer.valueOf(s);
                            int x = i.intValue();
                方法详情:
                    public static int parseInt(String s)    //所属类: Integer

    自动装箱和自动开箱:
        手动装箱和拆箱:
            装箱:  基本数据类型 转换为对应的 包装类
                Integer i = Integer.valueOf(100)
            拆箱:  包装类类型 转换为对于的 基本类型
                Int i2 = i.IntValue()
        自动装箱和拆箱:
            装箱:
                Integer i = 100;
            拆箱:
                i += 100;
                    先自动拆箱, 执行i+100, 再自动装箱为i
Date:
    基本说明:
        指的是Util包下的Date类
        Date代表了一个特定的时间, 精确到毫秒
    构造方法:
        (1) public Date();
                构造的对象存储一个当前时间的值
        (2) public Date(long date);
                构造的对象存储一个毫秒值==date, 70年原点

    常用方法:
        (1) public long getTime();
                获取当前毫秒值(70年原点)
        (2) public void setTime(long time);
                毫秒换成时间(70年原点)

    SimpleDateFormat:
        使用流程:
            Date d = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat(yyyy-MM-dd HH:mm:ss);
            String s = sdf.format(d);   //format方法

            String s1 = "2020年12月21日 12:30:15"
            SimpleDateFormat sdf1 = new java.text.SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss");
            Date d1 = sdf1.parse(s1);   //parse()方法     异常, Alt+Enter处理

        基本说明:
            是一个具体的类, 用好看的方式格式化和解析日期
            重点学习 日期格式化 和 解析

        常用的模式字母和对应关系如下:
            y       年
            M       月
            d       日
            H       时
            m       分
            s       秒

        构造方法:
            (1) public SimpleDateFormat()
                    使用默认的时间和日期格式
            (2) public SimpleDateFormat(String pattern)
                    使用给定的时间个日期格式
        常用方法:
            public final String format(Date date);
                将日期格式化成字符串
            public Date parse(String source)
                从给定的字符串解析为文本, 以生成日期

Calender:
    使用流程:
        Calendar c = Calendar.getInstance();    //获取对象
        int MONTH = c.get(Calendar.MONTH) + 1;   //get方法
        c.add(Calendar.YEAR, +3);   //add方法
        c.set(2048, 11, 31);

    基本说明:
        属性值为null
        Calender是一个抽象类
            获取对象只能调 getInstance() 方法  //方法里用多态的方法初始化了属性值(赋了值)
        Calender是关于日历的类

    用处:
        Calender 为某一时刻和一组日历字段之间的传递提供了一些方法, 并未操作日历字段提供了方法
        Calender 提供了一个类方法 getInstance 用于获取calender对象, 某日历字段已经使用当前日期和时间初始化
            Calender rightNow = Calender.getInstance();     //获取一个目前的 含有今天日历各项数据的多态子类

    获取对象:
        代码:
            Calender c = Calender.getInstance();
        理解:
            作为抽象类, 只能在方法中引入子类, 用多态的方式赋值
    提取目前日历数据的方法:
        c.get(Calender.YEAR)
            返 当前年份的数字
        c.get(Calender.MONTH) + 1;
            返 当前月份的数字 - 1
        c.get(Calender.DATE)
            返 当前日期的数字

    常用方法:
        public int get(int field):
            返回给定字段的值
        public abstract void add(int field, int amount)
            根据日历的规则, 将指定的时间量添加或减去
        public final void set(int year, int mouth, ina date)
            设置当前日历的年月日