包和导包:
    包:
        作用:
            其实就是文件夹
            对类进行分类管理
        创建包:
            package  包名; (多级包用.分开)
                //范例:  package 第1阶段._8_包和修饰符.demo
        带包类的java类编译和执行
            手动建包编译执行:
                1) 编译.java文件     javac HelloWorld.java
                2) 手动创建包        在java_basic建立文件夹'第1阶段._8_包和修饰符'
                3) 将class文件放到包里面
                4) 带包执行          java 第1阶段._8_包和修饰符.HelloWorld
            自动建包:
                java -d .helloWorld.java
    导包:
        导包的概念和作用:
            使用不同包下的类时, 使用的时候要写类的全路径, 很麻烦
            为例接话带包的操作, Java提供了导包的功能
        格式:
            格式: import 包名;
            范例: import Dog;
修饰符:
    分类:
        (1)权限修饰符
        (2)状态修饰符
    权限修饰符:
        修饰符     同一个类中  同一个包中的子类无关类  不同包的子类  不同包的无关类
        private      1               0              0           0
        默认          1               1              0           0
        protected    1               1              1           0
        public       1               1              1           1
    状态修饰符号:
        final:      //最终
            用法:
                修饰方法: 表明是最终方法, 不能被重写
                修饰变量: 表明是常量, 不能再次赋值
                修饰类:   表明是最终类, 不能被继承
            final修饰变量:
                修饰基本类型变量: (本类中直接定义的的int, double等变量)
                    final int a = 11;
                        :a的值不能变
                修饰引用类型: (d.age)
                    final package2.Student s = new package2.Student();
                    s.age = 100;
                        :s的地址不能变, 但地址里的内容可以改变
        static:         //静态
            用法:
                可用来修饰成员方法, 成员变量
                被static修饰可直接通过类名来访问(Cat.eat()), (public修饰的都可使用对象名调用)
            使用场景:
                当一个方法需要被类的所有对象共享
            static访问特点:
                总结:
                    静态成员只能访问静态成员
                具体:
                    非静态:
                        能访问 非静态成员变量 / 非静态成员方法
                        能访问 静态成员变量 / 静态成员方法
                    静态:
                        能访问 静态的成员变量 / 静态成员方法
        abstract:
            用法: 构建抽象类



