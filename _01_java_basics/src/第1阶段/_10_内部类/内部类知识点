内部类:
    概述:
        在一个类中定义另一个类
            举例:在类A内部定义了类B, 类B就被称为内部类
    代码格式:
        public class 类名A {

            public class 类名B {
                ...;
            }
        }
    内部类访问特点:
        内部类可以直接访问外部类的成员, 包括私有
        外部类要访问内部类成员, 必须创建对象
    分类:
        按照内部类在类中定义的位置不同, 可以分为以下两种形式:
            在类的成员位置: 成员内部类
            在类的局部位置: 局部内部类
成员内部类:
    成员内部类的使用方法:
        (1)直接实例化:   //内部类必须共有才能这样做
            Outer.Inner o = new Outer().new Inner;
            o.method();
        (2)在Outer中再写一个使用Inner的方法(在该方法中实例化并使用):
            //成员内部类
            public class Inner{
                public void showNum() {
                    System.out.println(num);
                }
            }

            //使用内部类
            public void uesInner() {
                Inner i = new Inner();
                i.showNum();
            }

局部内部类:
    局部内部类概念和特点:
        概念:
            局部内部类是在方法中定义的类, 外界无法直接使用, 需要在方法内部创建对象并使用
        特点:
            局部内部类可以直接访问外部类的成员, 也可以访问方法内的局部变量
    局部内部类的使用方法:
        在所属局部类的成员位置直接写代码, 创建内部类的对象, 并调用内部类的方法
             public void method() {
                    //局部类
                    class Inner {
                        public void show() {
                            System.out.println(num);
                        }
                    }
                    //使用局部类
                    Inner i = new Inner();
                    i.show();
             }

匿名内部类:
    前提:
        存在一个 类A(具体/抽象都可以) 或 接口I
    代码:
        new A {
            方法实现/重写;       //代码只能是方法的 实现/重写, 写的任何新方法无效
        };
        or
        A a = new A {
            方法实现/重写;
        }
    使用场景:
        常用来实现接口

    理解:
        实例化对象的本质:
            左边是堆内存数据的加载, 右边是栈内存空间的分配
                子类分配内存空间时, 也会把父类也分配好
                左堆右栈
                重写方法实际上是写了个指针, 把写的东西的地址指向原来的方法