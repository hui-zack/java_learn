继承:
    基础概念:
        继承是面向对象的三大特征之一
        可以使子类具有父类的属性和方法,
        还可以在子类中重新定义, 追加属性和方法
            用法:
                子类可以用父类的方法
                子类可以用自己的方法
            优点:
                提高了代码的复用性和维护性
            缺点:
                耦合性高, 消弱了灵活性

    格式:
        public class 子类名 extends 父类名 {}
    使用场景:
        a是b的一种 --> a是子类, b是父类:

继承的写法:
    子类中只需要重新定义构造方法
        public Dog() {
        }

        public Dog(String name, int age) {
            super(name, age);
        }


访问顺序:
    继承中变量的访问:
        寻找顺序:
            本方法内找 -> 成员变量中找 -> 父类成员变量中找
    继承中方法的访问:
        寻找顺序:
            本类中找 -> 父类中找
    继承中构造方法的访问:
        访问子类中所用的构造方法, 都会默认先访问父类中无参构造:
            子类初始化前, 先父类初始化
            任何子类的构造方法, 其默认第一条为: super();
        注意:
            父类中要自己给出无参构造方法, 不然报错
super
    使用场景:
        在子类中的属性或方法与父类一致, this和super用于区分
    原理:
        super 父类对象引用
        this  本类对象引用
    this和super的调用格式:
        关键字     访问对象    访问成员变量      访问构造方法      访问成员方法
        this       本类         this.age        this()       this.show()
        super      父类         super.age       super()      this.show()
    内存图:
方法重写:
    基本概念:
        子类中出现和父类中一模一样的方法, 即名,参和返回值都一致
        私有方法子类无法重写
        子类的方法权限不能更低(public > 默认 > 私有)

    格式:
        public void call(String name) {
            新代码;
            super.call(name)   //父类中call方法的代码
        }
    @Override
        使用场景:
            重写父类方法中用在方法上一行加Override,
            检查方法重写是否成功

继承的注意事项:
    java中只支持单继承, 不支持多继承(同时继承)
    java中支持多重继承






