抽象:
    概述:
        在java中, 一个没有方法体的方法应该定义为抽象类
        类中如果有抽象方法, 该类必定为抽象类

    抽象类的代码:
        abstract:
            用法:
                (1)在类声明中修饰为抽象类
                (2)在抽象方法中修饰返回符号
            代码:
                    实例:
                    public abstract class Animal {
                        public abstract void eat();
                    }
            作用:
                (1)用来定义抽象类
                (2)用来定义抽象方法(没有方法体的方法)
            注意: 抽象方法必须在抽象类中
    抽象类的调用:
        抽象类必须被继承后, 通过多态使用:
            Animal a = new Cat();
        所有抽象方法都必须在子类中重写(除非其本身是抽象类)

    抽象类特点:
        (1)抽象方法必须在抽象类中
        (2)抽象类不能实例化, 只能参考多态的方式, 通过子类对象实例化, 叫做抽象类多态
            抽象类的子类:
                要么重写所有抽象方法
                要么子类也是是抽象类
        (3)第1阶段._9_接口
抽象类的成员特点:
    成员变量:
        可以是变量
        可是是常量
    构造方法:
        可以有构造方法, 但不能直接实例化
        用于子类访问父类数据的初始化
    成员方法:
        抽象方法:
            限定子类必须完成某些动作
        非抽象方法:
            提高代码复用性

抽象类作为形参和返回值:
    方法的形参是抽象类名-> 形参需要是抽象类的子类对象
    方法的返回值是抽象类名->其实返回的是抽象类的子态对象