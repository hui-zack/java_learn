接口知识点目录:
    接口 -->
        接口
        接口实现类使用接口:
        接口操作类使用接口:

接口:
    接口概述:
        接口是一种公共的规范标准, 只要符合规范标准, 大家就可以通用
        java中的接口更多的体现在对行为的抽象
    接口特点:
        接口用关键字interface修饰(接口创建)
            public interface 接口名{}
        接口不能实例化:
            接口如何实例化呢? 参考多态的方式, 实现类对象实例化,称为接口多态
            多态的形式: 具体类多态, 抽象类多态, 接口多态
            接口的前提: 有继承或者实现关系, 有方法重写; 有夫(类/第1阶段._9_接口)引用指向(子/实现)类对象
    接口成员特性:
        成员变量:
            只能是常量
                默认修饰符:
                    public static final
                        实例: (public static final) String name = 3;

        构造方法:
            (1)接口中没有构造方法, 因接口是对行为进行抽象, 没有具体存在
            (2)一个类中没有父类, 默认隐形继承Object类
            接口实现类隐形继承Object类:
                    接口实现类类声明:
                        public class InterImpl (extends Object) implements FhilipROI.Inter {
                            ...;
                        }
        成员方法:
            默认抽象方法, 且必须是抽象方法
                默认修饰符:
                    public abstract

    关于接口中的方法, JDK8和JDK9中有新特性, 后面讲解

    类和接口的关系:
        类和类的关系:
            继承关系, 只能单继承, 但是可以多层继承
        类和接口的关系:
            实现关系:
                单实现
                多实现
                可以继承一个类的同时是是实现多个接口
        接口和接口的关系:
            继承关系:
                可单继承
                可多继承

    抽象类和接口的区别:
        成员区别:
            抽象类:        常量, 变量;     有构造方法;      有抽象方法, 有非抽象方法;
            第1阶段._9_接口:          常量;                         有抽象方法;
        关系区别:
            类与类:         继承-> 单继承
            类与接口:        实现-> 单实现,多实现
            接口与接口:      继承-> 单继承, 多继承
        设计理念区别:
            抽象类:        对事务的抽象-> 包括属性, 行为
            接口:         对行为抽象-> 主要是行为

创建接口对象使用接口:
    使用流程:
        Runnable r = new Runnable() {
            @Override
            public void run() {
                System.out.println("调用Runnable");
            }
        };

        new Thread(r).start();
    基本说明:
        接口创建对象时需要重写接口方法
接口实现类使用接口:
    基本说明:
        实现类就是重写了接口方法的非抽象类,
        直接实例化实现类对象相当于用了接口
    代码:
        类实现接口用implements表示(接口实现类相当于接口的子类), 类声明如下:
            public class InterImpl implements FhilipROI.Inter{
                ...;
            }
    接口实现类的继承关系
        接口实现类实际上继承(隐性继承)的是Object类,实际代码如下:(extends  object可以不写)
            public class InterImpl extends Object Implements FhilipROI.Inter{
                ...;
            }
    接口实现需对接口中的方法进行重写
        原因: 本质上是继承了接口的类, 且接口中的方法默认为抽象方法, 所以要进行重写



接口操作类使用接口:  //内部类实现
    使用流程:
        (Jumping接口)
            public interface Jumping {
                void jump();
            }
        (JumpingOperator接口操作类)
            public class JumpingOperator {
                public void useJumping(Jumping j) {
                    j.jump();
                }
            }
        (Demo)
            JumpingOperator jo = new JumpingOperator();

            jo.useJumping(new Jumping() {           //这里执行的是:  Jumping j = new Jumping() { 重写方法 }
                @Override
                public void jump() {
                    System.out.println("猫可以跳高了");
                }
            });
    基本说明:
        demo中调用操作类中的使用接口方法, 输入参数: (new 接口名{重写接口的方法 })
        new的是内部类

    前提条件:
        一个接口Inter
        一个接口操作类InterOperator(接口 对象名),
    代码:

        InterOperator IO = new InterOperator();
        IO.useInter(new FhilipROI.Inter() {
            接口实现(重写) 代码;
        })

    重点:
        内部类实现接口, 一个接口加一个接口操作类, 可以使用在多个场景

匿名内部类实现接口:
    使用流程:
        new Thread(new Runnable(){
            @Override
            public void run(){
                System.out.println("多线程程序启动了")
            }
        })
    基本说明:
        null