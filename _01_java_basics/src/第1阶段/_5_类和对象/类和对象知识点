实例化对象的本质:
        左边是堆内存数据的加载(代码存放区) ---(把要执行的代码输入到栈区)---> 右边是栈内存空间的分配(执行区)
        子类分配内存空间时, 也会把父类也分配好
        左堆右栈
        重写方法实际上是写了个指针, 把写的东西的地址指向原来的方法
类和对象:
    概念:
        类:
            是对共同属性和行为的事务的抽象, 用于确定对象拥有的属性和行为
        对于对象来说:
            类是对象的抽象集合
            对象是类的元素实体
    类的定义和调用:
        类的组成:
            属性: 成员变量体现(类中方法外的变量)
            行为: 成员方法体现(和前面的的方法比, 去掉了static关键字)
        定义实例:
            public class phone {
                int price;      // 成员变量
                int brand;

                public void call() {    //成员对象
                    System.out.println("2999");
                }

            }
        对象的调用:
            1.创建对象:     // 类名 对象名 = new 类名();
                phone xiaomi_9 = new Phone();
            2.使用成员变量:
                格式:      // 对象名.变量名;
                    xiaomi_9.brand;
            3.使用成员方法:
                格式:     //  对象名.方法名();
                    xiaomi_9.call();
    内存情况:
        单个对象:
            实例化后, 对象名存储一个地址值
            类变量在堆内存, 随main的结束而消失
            方法在栈内存, 方法调用后就消失
        多个对象:
            每实例化一个对象, 类都会分配给对象名一个的地址, 在此基础下分配内存
            多个实例对象间存储的地址并不相同, 除非下面这样搞:
                package2.Student s1 = new package2.Student();
                s2.package2.Student = s1             //   两个对象指向相同, 一个改堆内存中内容, 另一个的也会变
    成员变量和局部变量:
        类变量/成员变量:
            类中方法外的变量为成员变量
            在堆内存
            随对象的存在而存在, 随对象的消失而显示
            有默认值
        局部变量:
            方法中的变量
            在栈内存
            随方法的调用而存在, 随调用的完毕而消失
            无默认值, 必须定义并赋值
封装和标准类:
    private:            //权限修饰符
        定义:
            有什么用:
                修饰变量或方法,
                保护成员不被别的类使用
                被修饰的类变量或方法,只有本类中的代码才能访问
            使用实例:
                修饰类变量:
                    private int age;
                修饰类方法:
                    private public void study() {
                        ...;
                    }
    this:
        用法:
            方法中形参名和类变量名相同时, 加在类变量前和形参区分
            本质上是对象地址
        使用实例:
            public void setAge(int age) {
                this.age = age;
            }
    标准类的书写:
        其他类使用本类变量:
            提供'set变量名'第1阶段._5_类和对象.方法:               //方法用public修饰
                 写法:
                     public void setAge(int age) {...}
                 作用:
                     设置类变量的值,
            提供'get变量名'第1阶段._5_类和对象.方法:               //方法用public修饰
                写法:
                    public int getAge() {...}
                作用:
                    获取成员变量的值,并返回
    封装:
        封装概念:
            面向对象的三大特征(封装, 第1阶段._7_继承多态和抽象)
        封装原则:
            将类的某些信息隐藏在类内部, 不允许外部程序直接访问
            使用private隐藏类变量
            提供setXx()/getXx()方法实现对隐藏变量的操作和访问
        封装好处:
            提高安全性;
            提高复用性;
构造方法:   //无论是否使用, 都建议手工书写无参构造
    快速生成构造方法:
        Alt+Insert
    概念:
        是一种特殊的方法
        用于创建对象
        用于完成对象数据的初始化
    运行:
        每次实例化对象时, 都会执行一次构造方法!!!
        当没有定义构造方法时, 系统将默认给出无参构造方法
        定义了的构造方法, 系统将不再给出默认构造方法
        定义带参构造方法, 还要使用无参构造方法, 就要自己写一个
        可以定义多个构造方法, 机制为方法重载
    格式:
        public class 类名 {
            第1阶段._8_包和修饰符 类名(参数) {        //这是个构造方法
                ...;
            }
        }
标准类制作:
    1.类变量
        使用private修饰
    2.构造方法
        提供一个无参构造方法
        提供一个带多个参数的构造方法
    3.成员方法
        提供成员变量的setXxx()和getXxx();
        提供显示对象信息的show()第1阶段._5_类和对象.方法;
    4.创建对象并为成员变量赋值的两种方式
        无参构造后使用setXxx赋值;
        使用带参构造方法赋值;


